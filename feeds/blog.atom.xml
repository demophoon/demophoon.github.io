<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Fro Maintenance</title><link href="https://demophoon.github.io/" rel="alternate"></link><link href="https://demophoon.github.io/feeds/blog.atom.xml" rel="self"></link><id>https://demophoon.github.io/</id><updated>2015-02-15T11:35:00-08:00</updated><entry><title>Jenkins Job Builder</title><link href="https://demophoon.github.io/jenkins-job-builder.html" rel="alternate"></link><updated>2015-02-15T11:35:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2015-02-15:jenkins-job-builder.html</id><summary type="html">&lt;p&gt;So this weekend I spent some time playing around with &lt;a href="https://github.com/openstack-infra/jenkins-job-builder"&gt;Jenkins Job
Builder&lt;/a&gt; by Openstack
and I'm a massive fan. I have not started using jenkins in my personal life
until now and all I want to do is add jenkins to everything since discovering
this.&lt;/p&gt;
&lt;p&gt;What JJB lets you do is write out basic job configurations in a Yaml file and
when you run &lt;code&gt;jenkins-jobs update ./path/to/jobs.yaml&lt;/code&gt; it generates jenkins
configs and uploads them to your jenkins server. This lets you manage your
jenkins instance in a way that can be versioned and auditable! Big win there!
You can also specify templates in the yaml files and use the templates as bases
for jobs. I'm starting to do this with my python projects by first creating a
template for doing PEP-8 checks on code, as well as a template for running any
tests I create, and putting all of those individual jobs into a job group. You
can think of job groups as mini pipelines. After I have created that pipeline
adding new python projects turns from hours of cloning and modifying jobs in
Jenkins into just modifying your job configurations to utilize that job group.&lt;/p&gt;
&lt;p&gt;When you update the jobs all of the mini jobs in a pipeline are created
automagically and kept up to date with what is in the configurations. I don't
even see why you'd need to run the update command if that itself is a Jenkins
job!&lt;/p&gt;
&lt;p&gt;If you are interested in seeing my configurations they are all open and
available here: &lt;a href="https://github.com/demophoon/jenkins-jobs"&gt;https://github.com/demophoon/jenkins-jobs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This blog post was published using Jenkins!&lt;/p&gt;</summary><category term="Technology"></category><category term="Python"></category><category term="Jenkins"></category><category term="Automation"></category><category term="CI"></category></entry><entry><title>Tornado over Pyramid for Webvim</title><link href="https://demophoon.github.io/webvim-tornado.html" rel="alternate"></link><updated>2015-02-01T18:52:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2015-02-01:webvim-tornado.html</id><summary type="html">&lt;p&gt;So I've done a lot of work getting Webvim to the state that it currently is at
right now. Along the way I ran into some very interesting problems that needed
to be solved in order to get the 1.0 release out.&lt;/p&gt;
&lt;h2&gt;Refactor&lt;/h2&gt;
&lt;p&gt;This started off with a complete refactor of the back end technology to stop
using Pyramid and switch over to a lighter weight server called Tornado. I
realized that I was using Pyramid in the complete wrong way, mainly for serving
up static content with most of the functionality being taken care of in the
&lt;code&gt;termio&lt;/code&gt; and &lt;code&gt;terminal&lt;/code&gt; python modules as well as the front end logic being
handled by the javascript that I wrote. Pyramid was essentially a glorified
cookie/session manager that just happened to have websocket capabilities.&lt;/p&gt;
&lt;h2&gt;In comes Tornado's IOLoop Reactor&lt;/h2&gt;
&lt;p&gt;When I was digging into &lt;a href="https://github.com/liftoff/GateOne"&gt;GateOne's&lt;/a&gt; codebase
in my attempt to not have to write my own terminal emulator and multiplexor I
noticed that there was a callback mechanism that was built in to both
components. Being very familiar with callbacks knowing javascript this was
something that intrigued me and would have come in very nicely so that I don't
have to guess when the terminal was updated by the program. The only caveat was
that you needed to be using the libraries with Tornado and at the time I was
lazy and wanted to stick to something I knew, which was Pyramid.&lt;/p&gt;
&lt;p&gt;After considering moving over to something lighter weight I installed Tornado
and began refactoring. Before what I had done to get the terminal working in a
close to realtime fashion was to have a while true loop running constantly
checking for updated to the terminal every tenth of a second. Seeing that my
reactor was very &lt;em&gt;homegrown&lt;/em&gt; and slow when I moved to Tornado I saw massive
improvements in speed and performance since the absolute best latency you could
get was 100ms between pushing the key and getting a response from the server.&lt;/p&gt;
&lt;p&gt;With Tornado being lighter weight the startup time was significantly reduced. I
also could focus less on the framework aspect of Pyramid and focus on more of
the code itself that was driving webvim. Also with way fewer dependencies,
installation takes no time. All of these wins, big and small, made me very happy
with the result.&lt;/p&gt;</summary><category term="Technology"></category><category term="Webvim"></category><category term="Vim"></category><category term="Terminal"></category><category term="Pyramid"></category><category term="Tornado"></category></entry><entry><title>Alternate View on Pair Programming</title><link href="https://demophoon.github.io/pair-programming.html" rel="alternate"></link><updated>2014-09-12T00:04:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2014-09-12:pair-programming.html</id><summary type="html">&lt;p&gt;For some time now I had thought of pair programming as being counterintuitive.
I'm sure others out there have had the same thought process as me. For
instance, i'd have thoughts like "Wait, you're saying that TWO programmers are
going to try and share ONE computer?!? Wouldn't that just slow the process of
development down?". If you have found yourself having thoughts like this about
pair programming I challenge you to think about it in a different light. Pair
programming isn't like howÂ the BitBucket video below portrays pair programming.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dYBjVTMUQY0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Instead think about it as a way for two developers to share knowledge to one
another efficiently. While you might be losing resources and raw development
time you are gaining wisdom and knowledge at an alarming rate. During my first
weeks at Puppet Labs I had paired for the first time in, well, forever and it
was one of the most satisfying things I could have done. Instead of fumbling
around in the source code alone and by myself I was able to talk to my
co-worker who had been working on Puppet for quite a lot longer than me. I
worked real issues with him that could be seen at the end of the day in the
codebase. I even got my first pull request in on my second day on the job.
Pairing encourages you to review code that your colleagues are writing as it is
being written. I began to ask questions about why things are happening a
certain way instead of where I should even start on a problem. The where to
start on a problem was something that someone that has knowledge of all the
interconnecting parts should address and not someone that has never touched the
system before. You'd never send a rookie into the kitchen on his first day and
expect that things would just get done if he was never shown the ropes.&lt;/p&gt;
&lt;p&gt;So next time you run into that problem that you are unable to solve try and see
if you can pair with someone that knows the problem or system and tackle it
together. Turn it into a learning experience and pick at the other person's
brain while you are at it so that next time you will be prepared for that
problem when you see it again. Or even better, next time you encounter a more
difficult problem you can take the knowledge that you acquired in the pairing
session and help show someone else the ropes as you tackle the problem
together.&lt;/p&gt;</summary><category term="Technology"></category><category term="Pair Programming"></category><category term="Self Help"></category></entry><entry><title>Bringing a Disposable Terminal to the Browser</title><link href="https://demophoon.github.io/webvim.html" rel="alternate"></link><updated>2015-01-29T22:27:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2014-05-27:webvim.html</id><summary type="html">&lt;p&gt;A few weeks ago I was playing around with some new technology in the web
browser. I had always wanted to show off my vim configurations in some sort of
fashion and I had written a lot of really sweet web applications so I figured
why not show off my vim config in the browser.&lt;/p&gt;
&lt;p&gt;The problem that I was faced with was how to get a good user experience in the
web browser without rewriting vim in in javascript, since many have tried and
have not quite gotten it right. I moved to my next solution, bring vim to the
browser by streaming a terminal to it! This task was far more interesting to me
because it went past just streaming vim, but all terminal applications to the
web browser! So I did exactly that!&lt;/p&gt;
&lt;h3&gt;Removed for now... Awaiting Webvim Version 1.0...&lt;/h3&gt;
&lt;p&gt;What you see above is a real, live terminal. Running a real instance of vim.
Everything works as it is suppose to work just like you were sitting in front
of a terminal. I am using a few libraries that &lt;a
href="https://github.com/liftoff/GateOne"&gt;GateOne&lt;/a&gt; utilize in their
application and adapting it to spin up docker containers. I then monitor the
output of the container and send any changes to the web browser in near
real-time using websockets. Each container is set to run for 30 minutes before
terminating itself, I've also disabled networking in the containers so that my
server is not used in some botnet. So what about security? Cannot people just
escape out of vim using ":!bash"? Well yes, but I'm not too worried about it
and i'll tell you why.&lt;/p&gt;
&lt;p&gt;Docker allows me to have very lightweight linux containers that boot in a
second or two. In fact, if you are visiting the website for the first time the
container that you are currently connected to was spun as you loaded the page.
These containers are sandboxed off from each other and the host system. Only I
can specify the type of interactivity each container can have with the each
other or the host system. I'm using a program called timelimit to automatically
kill vim after 30 minutes as well so that the servers resources do not get
eaten up by your session. This keeps thing moving along quite nicely. Sure
people can go ahead and escape out of vim with ^z or :!bash but since its
sandboxed off and networking is disabled there is very little that you could do
to harm the actual host machine (which is an amazon box dedicated to this demo
and &lt;a href="http://www.brittg.sexy/"&gt;http://www.brittg.sexy/&lt;/a&gt;). Also when
you connect to a webvim session you get a unique identifier that connects you
to your docker container. You can share the link that the website redirects you
to with your friends and all share the same docker container or have them get
their own containers by giving them the base url (&lt;a
href="http://www.brittg.sexy/"&gt;http://www.brittg.sexy/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I also found a really neat terminal emulator for the web browser, also used by
gateone, called &lt;a href="https://github.com/chjj/term.js/"&gt;term.js&lt;/a&gt;. I
discovered that I could send raw terminal data to it and it would be rendered
properly. This made the browser part super easy. All I needed to do is write in
screen resizing and an auto disconnect after 10 minutes of inactivity and I was
done with the front end.&lt;/p&gt;
&lt;p&gt;If you would like to see this project in its final state check it out at &lt;a
href="http://www.brittg.sexy/"&gt;http://www.brittg.sexy/&lt;/a&gt;. The code for the
project is out on github at &lt;a
href="https://github.com/demophoon/webvim"&gt;https://github.com/demophoon/webvim&lt;/a&gt;.
Feel free to pull it down and make it your own! I've got my own personal webvim
server stood up that lets me share bash prompts with others so that I can show
off the rest of my configurations while everyone is on their own personal
devices.&lt;/p&gt;</summary><category term="Technology"></category><category term="Webvim"></category><category term="Vim"></category><category term="Terminal"></category><category term="Websockets"></category><category term="Html 5"></category></entry><entry><title>Building My Own Google Music With Hookers And Blow</title><link href="https://demophoon.github.io/google-music-party-mode.html" rel="alternate"></link><updated>2013-12-29T22:54:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-12-29:google-music-party-mode.html</id><summary type="html">&lt;p&gt;When things do not work the way I want them to work I tend to build my own
version of whatever it is that wasn't working for me. In this case, it is
Google Music. Now Google Music is a fantastic service, and i'm not moving away
from it any time soon. It's just missing some features that other services do
so well. I have really missed the ease of playlist sharing that Spotify had or
iTunes's DJ playlist which turned your entire iTunes library into a party
playlist where your friends could put songs they wanted to hear into a queue
for everyone to vote on. The higher rated songs would be played first and then
the lower rated songs next. The whole interactive part of music is what I miss
the most by switching over to Google Music, So I'm going to be remedying it by
building my own Google music with these new features. Of course doing this
opens up a whole bunch of interesting problems, like where am I going to get
access to all of my Google Music files and playlists and how am I going to
manage restricting streaming to only one computer at a time.&lt;/p&gt;
&lt;p&gt;I did some digging around on finding a library that let me talk to Google Music
programmatically and I found an unofficial library that warns you that it is
not endorsed by Google what so ever and should be used seldomly to not raise
any eyebrows at Google. Playing around with the library let me grab the mp3 to
stream it locally, which can pretty dangerous in the wrong hands since it could
technically just be saved to your hard drive and thats the end of that. That
brought up an interesting challenge for me because there was no way that I'm
going to be saving a bunch of music that I don't even own to my hard drive. And
at the same time I need to cache some of it for incase I want to re-listen to a
song a few hundred times (which happens more often than I care to admit). So
off to building the server, written in Python using the pyramid web framework.
I checked out sending temporary files back via a regular request and I found a
builtin python module for handling temporary files called tempfile. It creates
"file-like" objects that you can manipulate as if they were any regular file
except when they are closed they are automatically destroyed. When a request
comes in for a new song to stream I hand that off to the google music api to
retrieve the song and throw the mp3 into a temporary file. I take that file and
package it inside of pyramid's "FileResponse" container and cache that for an
hour in memory. Now to lock down all of the computers that have access to the
stream I implement my own authentication within pyramid and only let one user
account in with a randomly generated auth-token stored in the form of a cookie.
When User A requests the site for the first time they are prompted with a login
page and upon successful login the server randomly generates a token and marks
that token as the one that is allowed to be streaming music. When User B tries
to request a song the token doesn't match up with the one allowed and it
rejects the request right there.&lt;/p&gt;
&lt;p&gt;For now I don't plan on having more than one user account so I am keeping the
login associated with the Google account that is powering the server with
Google Music access. There is a lot of things I am wanting to implement on the
server side but I needed things to be polished up on the front end before
continuing on the backend. Some of the challenges I am facing on the front end
so far are problems with libraries and looks.  Knockout.js, the MVVM library
I'm using to power the frontend, seems to have a problem with lots of data if
not handled correctly. When I was retrieving a list of songs from the back end
I was pushing each new song object onto a knockout observable array filled with
all the songs that the client knew of.  Every time an observable or observable
array is updated it causes a refresh event to happen which then reevaluates
everywhere where that observable variable or observable array is referenced.
Whether that be in the DOM or in any dependant functions. This gets expensive
after you load about 500 items into the array because it reevaluates for all of
the objects in the array every time you push one object onto it. I was
experiencing the tab hanging for a good 4-5 minutes and that was not going to
work for me or anyone else for that matter. A much better way of going about
this problem was to fill a normal array with the items and then initialize the
observable array with all of the items from the original array into it.
Therefore only one refresh event is called and the DOM updates with all 5500
records in a few seconds. I have pagination written into the API but I am not
using it on the front end yet because I was focusing on other things. One of
the other interesting things that I had to deal with was how to seamlessly play
tracks together.&lt;/p&gt;
&lt;p&gt;I'm using the web audio api to play the music in the browser and it is really
great at letting you had full control over the audio that you are manipulating
but you need to give it time to warm up. The browser has to download the 5-10mb
music file and decode it into an array buffer so that it can be attached to a
source node and played through the speakers of the computer. Keeping that
system in balance is interesting because I don't want to load songs immediately
and I also don't want to load them too late. When about half the song is
completed I start loading the next few songs that have not loaded yet, up to 2
preloaded songs. As soon as there is about 1 second left of play time on the
currently playing song I make it so that the user can no longer switch the next
playing song and I begin prestaging the decoded audio buffer of the next song
for showtime. You can setup a source node to start playing at so I set it to
where the end of the song is minus about 9/10ths of a second since i've noticed
there is a little bit of lag between when you schedule the song to play and
when the song actually starts playing. I read that the delay can be about 1/5th
a second but I add in a few extra tenths of seconds because the client is set
to crossfade between songs which largely masks the pause that you would hear
otherwise. I'm not super satisfied with picking the 9/10ths number and I have a
few ideas that i've been tossing around in my head to get a more accurate idea
of when a song should start playing, i've just been trying to get a bunch of
front end things all taken care of.&lt;/p&gt;
&lt;p&gt;One of the design choices that I made was to have everything revolve around the
main song queue. The main song queue only consists of the songs that are going
to be played and not the song that is actually playing. When you want to play a
song you have to push it into the queue where it waits until all of the
conditions are right (It has its audio buffer downloaded and decoded and there
is no currently playing song) before it is pushed into the currently playing
slot. Doing things like pressing next or previous are all done through
modifying the queue. So when you want to skip to the next song I remove the
currently playing song and shift the first item into the currently playing
slot, that is of course after the song in the queue lets you know it is ready
to be played. Going back a song is just removing the currently playing song
from its slot and taking the previously played song and pushing it to the top
of the queue where it will wait until the song in the queue is ready to be
played. Doing things this way lets you keep an accurate history of every song
that you have played and it makes creating actions very easy. You are able to
create an infinite playlist by pushing things onto the queue when the queue
size has dropped below a certain number. One other advantage of a queue is it
can be used as your voting system automatically by simply moving things around
in the queue based on vote weight. If you are interested in seeing what I have
so far checkout the project atÂ &lt;a
href="https://github.com/demophoon/Google-Music-Party-Mode"&gt;https://github.com/demophoon/Google-Music-Party-Mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is still a lot of things that I need to add to get it to where I want it
to be like mobile so that anyone can vote on a song. Anyways, i'm going to call
it a night.&lt;/p&gt;</summary><category term="Technology"></category><category term="Google Music"></category><category term="Knockout"></category><category term="Javascript"></category><category term="Pyramid"></category><category term="Python"></category></entry><entry><title>Coding on the Go</title><link href="https://demophoon.github.io/coding-on-the-go.html" rel="alternate"></link><updated>2013-10-11T23:25:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-10-11:coding-on-the-go.html</id><summary type="html">&lt;p&gt;This last week I spent a little bit of time looking into my options for coding
on a mobile device, like a phone or a tablet, and I found some really promising
results. Now I had tried this venture before on my Nexus 7 and a cheap
bluetooth keyboard from micro center. An app that I am sure most people have
used on this similar venture calledÂ &lt;a
href="https://play.google.com/store/apps/details?id=org.connectbot&amp;amp;hl=en"
target="_blank"&gt;ConnectBot&lt;/a&gt;Â seemed like it will do the job but as soon as
you go to edit a file you realize that there is no support for Ctrl or Alt, or
any sort of modifier key for that isn't shift. I found that out when I was
trying to create/switch panes in tmux. Not being able to kill or background
programs almost makes any task near impossible, if not incredibly irritating.
Looking around on the internet I found someone that forked the ConnectBot
project and added in the missing hooks for bluetooth keyboards. The forked
project is called &lt;a
href="https://play.google.com/store/apps/details?id=sk.vx.connectbot&amp;amp;hl=en"
target="_blank"&gt;VX ConnectBot&lt;/a&gt;. I tested it out on my phone and Alt and
Control both work as expected. It was a bit weird working without Esc since
that has become a part of my flow with Vim. (My keyboard does not have an
escape button on it. Instead it has a lock button where escape should be that
locks my phone unless for some reason escape really does map to the sleep/wake
button on Android, in which case i'd have to get used to it.) Anyways, those
are just my findings, it will definitely give me something to do on long trips
in the car or give me a chance to do some work while I am waiting at the
laundromat.&lt;/p&gt;</summary><category term="Technology"></category><category term="Terminals"></category><category term="SSH"></category></entry><entry><title>IvanK Lib and Enhancing Canvas Elements With WebGl</title><link href="https://demophoon.github.io/ivank.html" rel="alternate"></link><updated>2013-06-02T21:28:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-06-02:ivank.html</id><summary type="html">&lt;p&gt;Now a while back I was introduced toÂ &lt;a href="http://www.opusthegame.com"
target="_blank"&gt;Opus the Game&lt;/a&gt;Â and it really sparked my interest just as
music related games do for me. The concept was something that I had seen before
in many games prior but nothing I had seen before was built to be played in the
web browser. I wondered what code could be driving this game and I
right-clicked to view the source and thats when my hopes and dreams were
shattered. It was written in Flash. This made a large part of me feel disgusted
because there was so much room for improvement as Flash is quickly being
replaced with Html5.Â This last month or so I have spent a decent amount of time
working with the IvanK javascript library that is built to help Actionscript
and Flash developers transition over to Html5 using the canvas element and I
was able to create my own rendition of Opus using purely Html5 Apis and tools.
Now before I show you my version of the game (which is very alpha by the way)
i'd like to first tell you about some of the great key features that I found
with IvanK.js. First of all, it is incredibly small, only 50kb! that is hardly
the size of a tiny picture which is an instant download on most phones that
don't already have a cached copy from a CDN. Next the library is very feature
rich coming with hit detection built right into the extensible sprite objects
you can create. And lastly this library makes use of WebGl to render 2D
graphics onto the canvas element. Now the traditional use of WebGl is to render
3D images onto a canvas element using the hardware so when you are using the
same technology to render 2D you Â get a massive performance boost. One of the
downsides that I did run into with the library was that the documentation is a
bit lacking and in order to dive in quickly you will have to parse through some
Actionscript documentation and figure out what works and what doesn't work but
other than that everything else was a really fun experiment. Anyways, if you
would like to see what I have done with recreating Opus the Game in Html5 visit
&lt;a href="http://brittg.com/mw" target="_blank"&gt;http://brittg.com/mw&lt;/a&gt;Â and
test out the demo (Latest version of Chrome only as the Web Audio Api is only
supported in Chrome). There are still a few screens missing but it gets the
concepts down to how extensible and applicable the library is to someone who
has very minimal experience in Actionscript.&lt;/p&gt;</summary><category term="Technology"></category><category term="Javascript"></category><category term="Html 5"></category><category term="WebGL"></category><category term="Canvas"></category><category term="IvanK"></category></entry><entry><title>Staying Motivated!</title><link href="https://demophoon.github.io/staying-motivated.html" rel="alternate"></link><updated>2013-05-05T23:31:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-05-05:staying-motivated.html</id><summary type="html">&lt;p&gt;And thats how far I've gotten this week.&lt;/p&gt;
&lt;p&gt;Just joking!&lt;/p&gt;
&lt;p&gt;I'll tell you what though, this has got to be my biggest downfall as a human,
staying motivated and not procrastinating and giving up early, especially on
personal projects, is something that I struggle with. Even looking at the
frequency of my blog posts over the last few months shows a steady decline in
my motivation to write. I think i'll need to come up with a calendar to track
my progress, something that is public so that the whole world can see it. The
commit graph has been one thing that has been keeping me motivated on Github.
Seeing it starting to fill in with the sweet green of daily commits keeps me
going there. I feel that the same sort of visual response will help me not
forget about this blog that I've set up here on my own website. Even HabitRPG,
a good habit tracking web app, cannot motivate me more than a few days. I
attribute some of that to the fact that I just don't want to spend the time to
log in on all of my computers and manually increment each counter after I
complete a task (that shit should be automated!) and the other part of me not
being able to use the tool is because of this fear that upon logging back into
it will reveal that I have died and lost all of my sweet hard earned progress.
I could probably come up with a million other reasons as to why I personally
shouldn't use it but I think I just need to man up and start caring about my
motivational and habitual progress. Starting now actually. I've just logged in
and just as I had expected my character has died but this is not going to
detour me this time and hopefully the next time it may happen.&lt;/p&gt;
&lt;p&gt;+1 for weekly blog posts.&lt;/p&gt;</summary><category term="Technology"></category><category term="Self Help"></category></entry><entry><title>Startups</title><link href="https://demophoon.github.io/startups.html" rel="alternate"></link><updated>2013-03-31T22:38:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-03-31:startups.html</id><summary type="html">&lt;p&gt;This last week I was invited to a &lt;a href="http://www.reddit.com/r/KCTech"&gt;/r/KCTech&lt;/a&gt;
meetup and got to meet a few of the startup companies and companies that
started in the Kansas City area. It makes me feel proud to grow up in what
people are calling the siliconÂ prairiesÂ now. I handed all of the business cards
that I had on me to be of assistance to any startup that needed a quick favor
or something, and I really do mean it to any of you that I handed cards to (and
those who I was not able to hand a card out to). I believe that what we have
here in the Kansas City area is very good and anyway I can help Â us become a
more thriving area would be my honor. I definitely plan on attending more of
these local meetups because it really is nice to start moving away from the
"Looks like we are not in Kansas anymore Toto", (which to be honest I never
liked in the first place) and on to something more meaningful.&lt;/p&gt;</summary><category term="Technology"></category><category term="Kansas City"></category></entry><entry><title>The Perfect Vimrc</title><link href="https://demophoon.github.io/my-vimrc-is-actually-the-literal-best.html" rel="alternate"></link><updated>2015-01-29T20:07:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-03-10:my-vimrc-is-actually-the-literal-best.html</id><summary type="html">&lt;p&gt;I've spent this last month fine tuning my vimrc config file to the point that I
feel it is nearing completion. Now this is not to say that my configuration has
a complete state as my tastes can change and I may stumble upon something that
I like even better than what I have currently. After playing around with all of
these plugins and settings I am going to give you a list of things that I have
found super helpful in enhancing Vim past it's out of the box configuration.
For this post I will mainly be focusing on the configurations and settings
themselves as plugins are an entire book alone. Anyone who is looking at
getting into customizing their vimrc should definitely look into this post and
check out &lt;a href="http://vimcasts.org/"&gt;Vimcasts.org&lt;/a&gt;. Especially the videos about
&lt;a href="http://vimcasts.org/episodes/updating-your-vimrc-file-on-the-fly/"&gt;Updating your Vimrc on the
Fly&lt;/a&gt; or
&lt;a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/"&gt;Synchronizing plugins with git submodules and
pathogen&lt;/a&gt;,
these videos will help you speed up the process of editing and syncing your
vimrc file and .vim directory.&lt;/p&gt;
&lt;h2&gt;The Must Haves&lt;/h2&gt;

&lt;p&gt;These settings are simply to help ease everyday Vim usage. I consider these the must haves of Vim and I find myself often typing them if they are not enabled on a machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set number
set hls
set backspace=2
set scrolloff=5
syntax enable&amp;lt;/pre&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set number turns on line numbering off to the side which is just a really nice
way for me to orient myself with where I am at in a file. Set hls will
highlight your pattern search to ease your substitutions. A handy trick I
learned was that when performing a substitution, if you do not pass in a
pattern into the "search" part of the substitution (e.g. &lt;code&gt;:%s//replace text/g&lt;/code&gt;)
Vim will use the last searched term (or anything that is currently highlighted
by set &lt;code&gt;hls&lt;/code&gt;. Set &lt;code&gt;backspace=2&lt;/code&gt; is something that I don't believe I should have to
do but it is to prevent me from getting frustrated when I am not allowed to
backspace past my insert point. I realize that this is not the Vim way, but it
keeps me sane. &lt;code&gt;scrolloff&lt;/code&gt; is not as necessary as the others but it is very nice
as it forces your cursor to always be x number of lines off of the edge of the
window when navigating around in normal/visual mode or modifying text in insert
mode. Finally, one that I simply cannot live without is syntax highlighting.
Vim does such a fantastic job with syntax highlighting for pretty much every
language I touch. I have added only one syntax file for scala files when I was
messing around with Gatling. Which, by the way, I'm saving that for a later
post because Gatling is pretty darn sweet.&lt;/p&gt;
&lt;h2&gt;The Neat and Helpful&lt;/h2&gt;

&lt;p&gt;These next set of settings are ones that I could live without but add a great
deal of class and character to my vimrc config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set ts=4 sts=4 sw=4 expandtab
set autoindent
set t_Co=256
set colorcolumn=80
highlight colorcolumn guibg=#000000 ctermbg=246
nmap &amp;lt;Space&amp;gt; za

&amp;quot; jj Exits Insert Mode
imap jj &amp;lt;Esc&amp;gt;

&amp;quot; Disable Arrow Keys
nmap &amp;lt;Left&amp;gt; &amp;lt;Esc&amp;gt;
nmap &amp;lt;Up&amp;gt; &amp;lt;Esc&amp;gt;
nmap &amp;lt;Right&amp;gt; &amp;lt;Esc&amp;gt;
nmap &amp;lt;Down&amp;gt; &amp;lt;Esc&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This next section is just a small chunk out of my personal config file as my
own file is quite large. These are the configs that I could do without but I
use them just about every single day. Starting off with the first line I have
Vim setup to use four spaces in place of a tab as that is what most Python
developers expect to see code. Auto indent is pretty self explanatory, Vim
takes the last lines indentation level and makes your line automatically the
same unless you are ending a code block or xml tree. &lt;code&gt;set t_Co=256&lt;/code&gt; lets Vim know
that you want it to run with the 256 colors instead of its default pallet of 16.
It adds a nice look and lets colorschemes look just right. Note that &lt;code&gt;t_Co&lt;/code&gt;
is really only for if you are using Vim in a terminal and not gVim or MacVim,
the graphical versions of Vim.  Color column tells Vim to color the nth column
of text. The next line (highlight colorcolumn) just tells Vim what color it
should use to color the color column. I have my column set at 80 to remind me
that I should not pass over that line if I want to stay within the 79 character
limit that
&lt;a href="http://www.python.org/dev/peps/pep-0008/#maximum-line-length"&gt;PEP-8&lt;/a&gt; says. If
you are using Vim's folding feature then this
next mapping is for you. It almost feels natural to map the spacebar to open
and close folds. That is exactly what nmap &lt;Space&gt; za does. For anyone
new to mappings, the syntax is as follows: [n]ormal mode [map]ing {this key}
{will perform this action}. The next line, imap jj &lt;Esc&gt;, tells vim that
when it is in Insert Mode it should listen for when I push "j" twice in a row.
I learned this little trick from Drew Neil since there is very rarely a word
where two J's are back to back that you will ever type. Since you are in insert
mode modifying text anyways there is not too many characters you can push to
perform a simple task. J also happens to be the motion to move down so there is
no other perfect match for this mapping. Finally I disable the arrow keys so
that I am not tempted to use them to move my hand away from home row to move
the cursor. This was more of a mapping to help teach me to use Vim's motions. I
actually strongly recommend the last 4 lines for everyone who is learning Vim
because it trains you to use the hjkl keys how they were meant to be used.&lt;/p&gt;
&lt;p&gt;I hope this gets some ideas into your head for what you want to do with your
vimrc. If you find something that you want to share regarding Vim leave a
comment below. Also I have my vimrc and configuration in its full out on Github
here: &lt;a href="https://github.com/demophoon/dotfiles"&gt;My Personal Vim Files&lt;/a&gt;. Check it
out and steal some of my configurations if you'd like, or use the entire thing
(I think it is brilliant).&lt;/p&gt;</summary><category term="Technology"></category><category term="Vim"></category><category term="Dotfiles"></category><category term="Editors"></category></entry><entry><title>Raspberry Pi and ddclient</title><link href="https://demophoon.github.io/rpi-ddclient.html" rel="alternate"></link><updated>2013-01-27T21:51:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-01-27:rpi-ddclient.html</id><summary type="html">&lt;p&gt;This last week my USB Wi-fi dongle came in the mail from Amazon, which I
specifically ordered for my Raspberry Pi. This was aÂ crucialÂ piece of my
Raspberry Pi puzzle because this little component would let me use the device
with only one cord attached to it. The power cord.&lt;/p&gt;
&lt;p&gt;I first configured it up to connect to one of the wireless networks that I have
in the house right. Mind that I needed a display and keyboard to complete this
task because I didn't know what the IP address was of
theÂ miniatureÂ LinuxÂ computer thus making it impossible for me to directly SSH
into it. I had planned to solve many of my problems with setting up Pagekite (a
program that allows you to tunnel traffic from one of your own public servers
to "localhost" on a private network.)&lt;/p&gt;
&lt;p&gt;Unfortunately for me that proved to be quite difficult to setup and get going
so I looked for alternate solutions. I'm not entirely sure as to why Dynamic
DNS was not my first solution, maybe because I had never played around with it
before. I had heard about how it worked a long time ago through DynDns. So I
browsed around at where I bought my domain at and there was free dynamic dns
there and I was in.&lt;/p&gt;
&lt;p&gt;Installing the package ddclient onto my Raspberry Pi and configuring it to send
its local IP address instead of its public IP address meant that as long as I
was on the same network as the Raspberry Pi I could always resolve
"http://www.rpi.brittg.com/" to the Raspberry Pi itself no matter what IP
address it was assigned. So when the device is rebooted and the DHCP server
assigns a different IP address from before I will still be able to change any
settings on it all because of Dynamic DNS.&lt;/p&gt;
&lt;p&gt;Since I am planning on running FrogPi (My Arduino + Raspberry Pi home security
system) I will need a reliable way of arming and disarming it when I am coming
and going from home.&lt;/p&gt;
&lt;p&gt;Anyways,Â that'sÂ what I have been playing around with this week. I'm also
nearing the completion of transferring to the dark side of Vim as I have picked
up the book "Practical Vim", I am not but 40 pages into the book and I have
just about doubled my knowledge on the basics that I thought I had a decent
grasp on. To top it all of I also picked up a very nice keyboard with Cherry MX
Blue switches and I am in love already. Hopefully I'll have this FrogPi project
of mine hammered out over this next week! I'll keep you updated.&lt;/p&gt;</summary><category term="Technology"></category><category term="Raspberry Pi"></category><category term="DNS"></category><category term="ddclient"></category></entry><entry><title>Vim</title><link href="https://demophoon.github.io/vim-is-actually-the-literal-best.html" rel="alternate"></link><updated>2013-01-13T23:22:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-01-13:vim-is-actually-the-literal-best.html</id><summary type="html">&lt;p&gt;So, over this last week or so I have been going through some tutorials on how
to better myself when it comes to Vim. I decided to take myself way back to the
roots and review a lot of basics such as correctly moving the cursor around in
a buffer, tab and window management, and my almighty .vimrc file. Over several
months I have picked up some very bad habits when it comes to the text editor
of my choice such as using the arrows to navigate through a file instead of
using motions to navigate. Instead of pushing "w" to skip to the next word I
found myself moving the cursor over with &lt;Right Arrow&gt; as many times as there
were letters in the word. This should make any experienced Vim user cringe with
greatÂ disgust. I've almost treated it like it was just anotherÂ sub par text
editor like Windows Notepad with some helpful tools that I had picked up along
the way like the features with Visual mode. I've decided this weekend that If I
am to use Vim I an going to use it like how it should have been used in the
first place which means no more arrow keys for me, there is a nice mapping you
can place in your own Vimrc file (the configuration file containing all of your
settings) that will map the arrow keys to nothing, effectively turning them off
so that I am forced to learn how to quickly navigate through a document with
the "hjkl" motions, along with others as well. I've also stepped up my game and
moved my entire &lt;code&gt;~/.vim&lt;/code&gt; directory into version control. The &lt;code&gt;~/.vim&lt;/code&gt; directory
contains all plugins you have added into Vim. Also in this folder is where my
&lt;code&gt;.vimrc&lt;/code&gt; file exists so that can stay in version control too.  It now lives on
Github so now whenever I want my Vim config I can pull it down into my home
directory and it is always up to date and the exact configuration that I would
use at home or at work or where ever really.&lt;/p&gt;</summary><category term="Technology"></category><category term="Vim"></category><category term="Editors"></category></entry><entry><title>Arduino Security System</title><link href="https://demophoon.github.io/arduino-security-system.html" rel="alternate"></link><updated>2013-01-06T23:44:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2013-01-06:arduino-security-system.html</id><summary type="html">&lt;p&gt;Some of you may know that I am planning on moving out on my own and getting an
apartment with a good friend of mine. Knowing this well before I move out I
decided to put some of my programming skills to the challenge of designing and
programming my own security system with an Arduino. I had collected a few PIR
motion detectors over the years, they just needed to be hooked up.&lt;/p&gt;
&lt;p&gt;Before I started work I had an idea, I wanted the system to be connected to the
internet so that I could arm it or disarm it from anywhere. Also I should be
able to view the status of the system af any given time. I had connected an
Arduino to a web server before as a simple weather station but it was only one
way communication to get the tempurature and barometric pressure to me, not the
two way communication that I needed to send commands to it. Also if the sensors
had been tripped then I'd need some way to alert me of the offense so that I
can act appropriately. I'd need to be able to handle events as events instead
of polling the device every so often. Using the PySerial library I am able to
send and recieve commands to the Arduino since it communicates via serial. I
did some investigation beforehand and found that whenever I ran the command
"serial.readline()" the function would block execution until a line was passed
back from the Arduino. This wasÂ immediatelyÂ a problem because I could not send
the arm command to the device until after I received a line. Also If the device
malfunctioned then Python would have no idea and would most likely run without
being able to communicate to the Arduino. I debated on whether I should have a
"Ping-pong" type of communication where the web server would send a Ping
command asking for the current state of the Arduino and the Arduino would
respond with a Pong and the current state but that doesn't get rid of the
blocking problem that I had before. Knowing a little bit about how Python's
threading module works I decided to create twoÂ separateÂ threads to handle
sending and receiving dataÂ separately. The threads run non-blocked even when a
function within the thread itself is blocking execution so the web server can
continue to run without a problem. I created a global state variable so that
the receiving thread could automatically update the state variable whenever it
needed and everyone else could peek at that variable if they needed. Also the
Arduino was setup to send the state back each and every time it's state was
changed (e.g. someone set off a sensor, the system was armed or disarmed, ect).&lt;/p&gt;
&lt;p&gt;I created the serial initialization code and the threads inside of the
&lt;code&gt;__init__.py&lt;/code&gt; file of my Arduino Pyramid project so that whenever I started the
web server the first thing that would happen before the views were initialized
would be that the web app would establish communication with the Arudino. One
more task I had to accomplish was how can I send myself an alert in a
reasonable amount of time to let me know If the system had been tripped. Luckly
for me Twilio makes an outstanding library for Python, and really every other
major language out there, that would let me send a text message directly to my
phone. Heck, I could set it up to call me If I wanted to! To top it all off I
plan on hooking up my Arduino to a wireless Raspberry Pi and running the web
server on that so that I don't need to have it hooked up to my computer all of
the time. Maybe I'll even try out Pagekite to make my Raspberry Pi public
facing so that I can send text message commands to arm or disarm the system If
I don't feel like logging into the web UI.&lt;/p&gt;</summary><category term="Technology"></category><category term="Arduino"></category><category term="Home Security"></category><category term="Python"></category><category term="PySerial"></category></entry><entry><title>Who are You People?</title><link href="https://demophoon.github.io/who-are-you-people.html" rel="alternate"></link><updated>2012-12-16T23:32:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-12-16:who-are-you-people.html</id><summary type="html">&lt;p&gt;Keeping track of the visitors that go to your website can be a very useful tool
in finding out bugs in all sorts of areas in a web application. Viewing them in
a neat and organized manner can make parsing through logs trying to figure out
what the user did to cause the error in the first place. This is exactly what I
have GoogleÂ AnalyticsÂ for, and if you do not know what Analytics is it is
Google's solution to tracking visitors through a website. Tracking scripts and
images can be found through out the entire internet, sometimes it is used for
advertising and other times it is used by people like me that are just curious
what kind of traffic my website generates on a day to day basis. Analytics has
a great dashboard that shows you all sorts of information that can be collected
via a smallÂ snippetÂ of code you throw onto any page you want to track. The neat
thing is with that small snippet of code you can use it on just about any
domain or subdomain that you may own and it will store the information under
the tracking id it creates for you. I have Analytic tracking scripts on just
about everything on this website for my information only. Since Analytics has a
very nice Visitor Flow chart I am able to tell how users got to an error page
or a 404 page simply by following the arrows from left to right on the chart.
It walks me through exactly what the user went through. First the index page,
then the images page, and finally to a 404 page where then they closed the web
page and the flow chart drops off the screen. Also with my tracking id I can
plug it into my apps on the Google Chrome web store and view keywords that
people searched to get to my applications. It even allows me to see if people
are staying to download the application or if they leave right then and there.
Knowing this information can be very valuable by helping you understand what a
typical flow is for any group of users. If you have not looked into Analytics I
strongly recommend looking into it or some other form of visitor tracking. You
may be surprised with what you may find.&lt;/p&gt;</summary><category term="Technology"></category><category term="Analytics"></category></entry><entry><title>Beta Testing and QA Testing</title><link href="https://demophoon.github.io/beta-testing.html" rel="alternate"></link><updated>2012-12-03T00:03:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-12-03:beta-testing.html</id><summary type="html">&lt;p&gt;This last week I started working on a card game called Cards of Lunacy, an
online version of Cards Against Humanity(tm). It turned out to be a lot of work
getting a lot of working parts moving just right since it is my first time
playing with Websockets in this fashion. Everything worked just fine when I ran
the server on my local computer with a few people playing at the same time. I
thought I had a decent product and then I pushed it out onto my server where I
could start running it for many more people to play. Lo and behold I started
getting emails and questions as to why the game was not working and how the
hell to play the game in the first place. Thus I began my journey of fixing
anything and everything that I could find, and there was an entire mountain of
errors. Beta testing can be quite rough if you are not open toÂ criticismÂ but it
is a very important step. Some of the comments such as "it doesn't work." are
quite annoying when that is all the information that they give but none the
less it is a problem that you probably should investigate further unless it is
a PEBKAC error. Dig through logs until you find something and then fix it. I've
learned all of this the hard way this time around.&lt;/p&gt;</summary><category term="Technology"></category></entry><entry><title>Bootstrap</title><link href="https://demophoon.github.io/bootstrap.html" rel="alternate"></link><updated>2012-11-25T00:47:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-11-25:bootstrap.html</id><summary type="html">&lt;p&gt;I was apart of a team consisting of a few of my coworkers that went out and
competed in the Compute Midwest Hackathon a few weeks ago and It was really
awesome getting to learn and see what everyone else was piecing together with
the Api's. My coworkers had mentioned Twitter's Bootstrap to me before a few
weeks earlier but I had not taken it seriously and just dismissed it as a hard
to learn library that I was not going to spend much time looking at. That was a
big mistake for me, because I now realize how powerful it really is. I started
using bootstrap at the Hackathon and realized that I was putting together a
very professional looking site in moments because of its built-in styles. All
of the time spent trying and create a top navigation bar with plain CSS could
have been spent thinking about something else instead. Bootstrap essentially
takes the thinking out of design for developers by giving them this CSS
framework. It has its own tile system that is very easy to learn. Each page
isÂ separatedÂ into different rows and spans. Each row can contain 11 spans and
the spans can be all different sizes as long as they add up to a total of 11 in
the row. Sidebars and the main content body can be completely done in a matter
of seconds instead of having to worry about how in the world you float this div
element over to the left and keep the main content to right right of it and
doing it dynamically or for a mobile phone. It's just stupid easy.&lt;/p&gt;
&lt;p&gt;Now I'm finally getting into some other libraries that have been mentioned to
me and I'm slowly realizing that these libraries are really here to make my
life easier, sure I need to know how the library works but it is much better to
learn a little library with a professional end result than to try and write
everything yourself and have it be half-assed. I really do have the tendencies
of a student, always sticking to the book and writing it all myself. I should
try and break that as soon as possible.&lt;/p&gt;</summary><category term="Technology"></category><category term="Programming"></category><category term="Bootstrap"></category><category term="CSS"></category></entry><entry><title>That Has Probably Been Done Before...</title><link href="https://demophoon.github.io/never-give-up.html" rel="alternate"></link><updated>2012-11-19T00:04:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-11-19:never-give-up.html</id><summary type="html">&lt;p&gt;This last week I went and wrote some new code that would help me easily hook
into &lt;a href="http://www.twilio.com/"&gt;Twilio&lt;/a&gt;'s REST-ful API. It was very
straightÂ forwardÂ with adding the basic authentication headers to each request
in Python which is a single line of code. After spending time and effort into
adding some basic features to the script and when I shared my code changes it
turns out that Twilio has an excellent library alreadyÂ writtenÂ in Python that I
just needed to import this entire time. The mentality that I need to do
everything is something that I still have from school. You know, that mentality
that you are not allowed to useÂ anyone'sÂ work as your own, and don't go looking
in the back of the book either. That is cheating. Don't get me wrong, It is
very important to have those types of rules so that you can learn how things
work in school but it is notÂ practicalÂ in the real world. Most times you are
not going to want to write a half-assed library for authenticating users via
LDAP or what have you because chances are that has probably been done before.
Don't reinvent the wheel! It is not your goal to reinvent the wheel every time
you want to make a new vehicle. Chances are that authentication library you may
create will turn out much more complicated, cumbersome, and riddled with
watermelon sized bugs than that of a library thats sole purpose was for having
a secure login system. Anyways, before you try integrating a new feature into
one of your programs, please check and see if something similar exists on in
the wild before trying to implement it on your own.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Also, on a slightly more personal and unrelated note, I must say that I am
sorry for the absent-ed-ness of these last few weeks of blogging. When shit
hits the fan, oh boy does it hit the fan with great strength and vigor. I won't
go into details of anything but I am definitely trying to become more
comfortable with things in my own life rather than letting it all fester and
turn into something unreasonably bigger than it is.&lt;/p&gt;</summary><category term="Technology"></category><category term="Programming"></category><category term="Self Help"></category></entry><entry><title>Learn, Relearn, and Learn Some More</title><link href="https://demophoon.github.io/always-be-learning.html" rel="alternate"></link><updated>2012-10-28T20:22:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-10-28:always-be-learning.html</id><summary type="html">&lt;p&gt;Recently I was asked to dig up some of the tutorials and classes that I had
used to learn Python! It was a three day course that went through
the fundamentals of the language and its real world uses with very helpful tips
and tricks a long the way. As great as any course is, you will probably not
retain some of the information that had been given to you. Maybe it was
something that the instructor had noted on but said that it would not be
covered in the class. Or it could have been something that you had been
Redditing through because it was not that important to begin with. Whatever the
case may be I highly recommend that you go back and go over the material again!
It has been a few years since I dove into the world of Python and when I was
asked to go retrieve the course that I had taken I spent a little bit of time
and reviewed the materials again. I had found that a lot of the things that the
instructor was mentioning made 1000 times more sense to me now, and I picked up
some things that I had completely missed the first time around. Now these are
not very important things to remember, which is why I chose to not retain the
information in the first place but none the less it was still new to me. So
where ever you ended up learning your language of choice, go back and review
basic concepts every once in a while. Even if that means finding a new
introductory course for the language.&lt;/p&gt;</summary><category term="Technology"></category><category term="Programming"></category><category term="Self Help"></category></entry><entry><title>Web Sockets and You</title><link href="https://demophoon.github.io/websockets.html" rel="alternate"></link><updated>2012-10-21T20:12:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-10-21:websockets.html</id><summary type="html">&lt;p&gt;Over this last week I learned about what web can exactly do. We developers use
sockets to transmit or receive data over a network by listening for, or sending
to, another computer or program. As long as the socket remains open information
can flow freely. Now setting this up in a program can be fairly easy, but when
you start experimenting with the new Web Sockets protocol that has been built
into the modern web browser, &lt;em&gt;cough&lt;/em&gt; Google Chrome, things can get tricky fast.
When I dove into the world of web sockets I discovered that if I wanted to
write my own web socket server I'd have to end up writing my own TCP handshake
function to establish a connection with the client, in this case Google Chrome
running locally on my laptop. I had not done any key generation to make sure
that the socket was encrypted before so I started my hunt for a module that
would allow python to act as a web socket server. I found
&lt;a href="http://autobahn.ws/"&gt;Autobahn&lt;/a&gt; and it easily let me setup a server from which
to send and receive data from. Once the test echo server was running I quickly
wrote up a sample webpage that could send a message to the server. A connection
had been established to the server when the page had loaded which meant that
the server was listening and waiting patiently for me to send a message. I sent
the message "Hello" and instantly "Hello" was sent back to me. Without any new
requests being made to the server since I had already established a connection
from the start. This technique can be used for simply speeding up web
applications or creating a complex online multiplayer game. Unfortunately for
us, Web Sockets are still in draft and It may be years for it to become a
standard in web browsers, but for the web browsers that support it they can
take full advantage of its sheer awesome technologies.&lt;/p&gt;</summary><category term="Technology"></category><category term="Javascript"></category><category term="Websockets"></category><category term="Html 5"></category><category term="Python"></category><category term="Autobahn"></category></entry><entry><title>Blue-Green Deployments</title><link href="https://demophoon.github.io/blue-green.html" rel="alternate"></link><updated>2012-10-13T12:37:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-10-13:blue-green.html</id><summary type="html">&lt;p&gt;The first time I heard about blue-green deployments was when I was at work
reconfiguring an apache web server. I noticed that using name-based virtual
hosting I could change the port that
&lt;a href="http://blog.brittg.com/"&gt;http://blog.brittg.com/&lt;/a&gt; had ran on from
say port 8790 to 8791 on the fly by just invoking a reload on the apache2
process. By starting up a new instance of my blog on port 8791 and diverting
all of the traffic to that port instead of the main process I would be able to
upgrade the main process with whatever updates I had. After the updates were
completed I'd just transfer the traffic back to port 8790 and shut off the
temporary server. Apache made this even easier since it has its own built-in
load balancer module. You can throw in as many virtual hosts as you want into a
load balancer and whenever you shut one down the traffic automatically migrates
over to the other instances. I didn't know it at the time but what I had
discovered was the Blue-Green deployment method which is very useful for
minimizing and eradicating downtime of an application. When you can script
everything to do this entire process automatically it becomes a push of a
button to push all of your newly written code out to the production instance. I
will tell you this, the work that you will spend writing the code for
streamlining your future deployments gives you more time to write more code and
less time worrying about planning when to put up that "Maintenance Mode" banner
which could be weeks down the road, only to find out that when the application
gets put into production there was a user error during the deployment that
caused an entire outage and code being rolled back. Been there, done that. So
you can believe me when I say Blue-Green is the way to go.&lt;/p&gt;</summary><category term="Technology"></category><category term="Deployments"></category><category term="Continuous Deployment"></category></entry><entry><title>Learn Something New</title><link href="https://demophoon.github.io/learn-something-new.html" rel="alternate"></link><updated>2012-09-30T20:28:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-09-30:learn-something-new.html</id><summary type="html">&lt;p&gt;Would you rather know a lot about one specific thing or know a little about a
lot of different things. I tend to live my life geared for the latter of the
two. Learn a little bit about a lot of things and you are able to connect the
dots between the categories to synthesize actual thoughts and ideas instead of
spewing facts that we found in the back of the book going through school only
because there was only ever one answer for anything. You are better geared to
face challenges that the real life presents you. Now I'm not saying that
knowing a lot about a specific thing is bad and that these people cannot think
for their own, because I know plenty of people that know a ton of information
within their expertise, it really isn't for everyone to take that approach on
knowledge. For me, I find a lot of different things very interesting and enjoy
learning about a bunch of things. I feel like I'd be a well rounded handyman
instead of an expert anywhere.&lt;/p&gt;
&lt;p&gt;Anyways, kind of a short post this week, not a whole lot happened outside of
work except seeing The Doctor roaming about the local Renaissance Festival,
quite entertaining in my opinion.&lt;/p&gt;</summary><category term="Self Help"></category></entry><entry><title>Orthogonal Practices</title><link href="https://demophoon.github.io/orthogonal-practices.html" rel="alternate"></link><updated>2012-09-23T16:33:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-09-23:orthogonal-practices.html</id><summary type="html">&lt;p&gt;Back in middle school I had gotten a BASIC stamp board to have some nice fun
with. I learned what it took to make a very simple program work with LED's,
displays, buttons, sensors, and just about everything else I could get my hands
on to. It was a lot of fun when I had simple tasks that I wanted to accomplish.
I moved on into high school to take that BASIC programming knowledge that had
learned and applied it to the programming classes I had. Learning all about the
different types of libraries I could use and how to use them, but never how to
implement my own libraries. Maybe this was something that was suppose to be
left to my college experiences but it is something that is key to developing
orthogonal programs.&lt;/p&gt;
&lt;p&gt;An orthogonal design is one where you keep a small number of components that
have a small number of dependencies between one another so that you can add or
change functionality in a program without needing to make a ton of code
changes. It was a concept that I had read about in &lt;em&gt;The
Pragmatic Programmer&lt;/em&gt; but had never actively implemented anywhere
in my code until recently. The last project I worked on was the Music Music
Revolution Html5 game and I wanted to take an orthogonal approach to it because
I find myself making a ton of changes in my code just to get one function to
work how I would want it to work. By separating out the key features in the
game like gameplay, background, the beat detection system, main menus, and the
transitions between the screens I am able to add any sort of functionality to
the game in a very small amount of code changes. Lets just say that I wanted to
take the gameplay out of the mix and only have an Html5 based music visualizer.
Well before I had learned what orthogonality was I'd have to make tons of
changes everywhere in my code just to make it all work together. I'd end up
rewriting the entire engine since I'd have the methods that would start/play
the music and calculate beats merged together. The drawing functions would be a
mess trying to figure out where each hit box would have gone. It just would
have been a complete disaster of incoherent function calls that I would have
just scrapped anyways. (I had tried this project before when I had created a
music visualizer in a non-orthogonal way.)&lt;/p&gt;
&lt;p&gt;Yesterday I rewrote bits and pieces of the application so that if I ever wanted
to make a music visualizer out of it I could just comment out the line that
draws any gameplay. The game would not even know, nor would it care. And that
is the beauty of it! I am able to remove an entire chunk of the game and
nothing falls apart because the beat analysis algorithms do not care what is
showing up on screen. It only cares about what it needs to care about, the
music and the beats. Same goes for the scoring system or the menus. They don't
care about what is going on with any other part of the program. Same with if I
wanted to scrap the beat detection functions. If I had removed it the worst
that would happen is there would be no beats on the screen. The game would
function exactly as I'd expect it to work without getting a run-time error
because &lt;code&gt;getBeat()&lt;/code&gt; was not declared.&lt;/p&gt;
&lt;p&gt;It is 110% recommended by me to take this approach to developing programs
because you don't always know what you want to have in the end but you always
want an easy way to get there.&lt;/p&gt;</summary><category term="Technology"></category><category term="Self Help"></category></entry><entry><title>Behind the Canvas in Music Music Revolution</title><link href="https://demophoon.github.io/behind-mmr-canvas.html" rel="alternate"></link><updated>2015-01-29T21:01:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-09-16:behind-mmr-canvas.html</id><summary type="html">&lt;p&gt;Last week I wrote about how the I was able to use the Web Audio API in my game
Music Music Revolution. This week I am going to tie it all back into creating
the visuals for the game and the troubles I ran into with that.&lt;/p&gt;
&lt;p&gt;Lets start by defining the Canvas element for anyone who has not had experience
with it. The canvas is exactly what it sounds like. It is a blank canvas that
you can paint onto with any colors, brushes, or pictures you desire. They can
be represented in either a 2D space or a 3D space with WebGL. To create the
canvas you simply create an empty canvas tag and then select it using
javascript.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;document.getElementById(&amp;quot;canvas&amp;quot;); var ctx = canvas.getContext(&amp;quot;2d&amp;quot;);
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have the 2d context of the canvas element stored in the ctx
variable we can now start painting the canvas with what we want. I started off
by placing a background picture onto the canvas that I had created in
Photoshop. Then overlaying some text about the game such as version number. I
took the waveforms that were created from the second Web Audio Analyzer node
and draw the waveform onto the canvas. I place a semi-transparent black box
over the play field to separate the background animations from the actual
gameplay to make it less distracting to the player. I place the yellow hit
boxes and that is basically everything that will always be there.&lt;/p&gt;
&lt;p&gt;The first audio analyzer sends me the beats a second before the user hears them
so I can calculate the distance I need to have each beat travel from its origin
to the final destination point at the yellow hit box. Now I had first just
calculated each movement with frames. I figured if I traveled 5 pixel downward
for each frame I drew then the beat would hit exactly 300 pixels from the
origin point if drawn at 60 frames per second. This method is horribly
ineffective because some frames may take longer to render than others and would
cause the beat to fall anywhere from 5-30 frames off and the latency is
definitely noticeable when you try to compete with the natural beat detection
that the brain is capable of. I ended up changing the method up to give me the
precise second that the beat would occur after the start of the song. I was
able to calculate where the beat needed to be at any given moment. and draw it
there whenever the draw() method was called. Other than that the visuals were
pretty easy to create, I still want to do more than just the simple waveform in
the background. I have another project that I had worked on a really long time
ago that I will probably do some code reuse and implement the visual effects I
had created for my web-based iTunes remote controller.&lt;/p&gt;</summary><category term="Technology"></category><category term="Html5"></category><category term="Games"></category><category term="Web Audio Api"></category><category term="Javascript"></category><category term="Canvas"></category></entry><entry><title>Behind the Audio in Music Music Revolution</title><link href="https://demophoon.github.io/behind-mmr.html" rel="alternate"></link><updated>2015-01-29T20:34:00-08:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-09-06:behind-mmr.html</id><summary type="html">&lt;p&gt;I spent a large majority of last week working on a project I called 'Music
Music Revolution' based off of the popular '&lt;a href="http://en.wikipedia.org/wiki/Dance_Dance_Revolution"&gt;Dance Dance
Revolution&lt;/a&gt;' and inspired
by &lt;a href="http://en.wikipedia.org/wiki/Beats_(video_game)"&gt;Beats&lt;/a&gt; for Sonys PSP. I
had always wanted to play a game similar to these two games except, it had to
be on the PC. &lt;!--more--&gt;My hunt for the game I had very much desired to play I
ran across many other games that incorporated music into the game play by
generating enemies with the beat of the music or moving a mouse to the beat of
the music, which is in my opinion very awkward. What I wanted needed to feel
more natural to tapping on the beats of the music. I had decided that I
couldn't find a game that quite captured what I had wanted out of it so I made
my own!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Music Music Revolution Gameplay" src="https://demophoon.github.io/static/images/gameplay.png" /&gt;&lt;/p&gt;
&lt;p&gt;Music Music Revolution is a Html 5 creation that uses a few very experimental
API's together to create the experience I was looking for. Now, it is very far
from perfect, but none the less, I am very proud of where it has come. The Web
Audio API, implemented in Google Chrome, allows the developer access to the low
level data that a simple &amp;lt;audio&amp;gt; tag cannot grasp. It is much different
in almost every way from the &amp;lt;audio&amp;gt; tag as well. Instead of specifying a
.Mp3 file in a src property within the tag, you download the .Mp3 as an
'arraybuffer' using an XMLHttpRequest. An arraybuffer is just the data type
that tells the javascript that it is not downloading JSON or XML, but an actual
binary file. This arraybuffer is then passed along into a method spawned from
the Web Audio API called decodeAudioData which asynchronously decodes the audio
file into a buffer that will eventually be used to play through the speakers,
but not before we get what we want out of it first. The buffer then attaches to
audioNodes which manipulate the audio using filters and equalizers and can also
give us the real low level data we really want. These audioNodes consist of
things such as high pass filters, low pass filters, normalizers, delays, gain,
attack, splitters, ect ect ect. Basically the building blocks of any audio
system, and we have complete access to it all! Just that fact alone makes me
giddy with the possibilities. The audio passes through a splitter to give me
one feed for the beat detection algorithm and the other for the sound that the
end user hears. The beat detection path sends the audio through both a high and
a low pass filter to help amplify the bass and treble of the song to make it
easier for beats to be detected. Then the &lt;a href="http://en.wikipedia.org/wiki/Spectrum_analyzer"&gt;FFT
Spectrum&lt;/a&gt; is analysed to
determine where the beat is in the song. That information is relayed to the
actual game where the hit block is generated displayed to the user. The second
audio path is sent through a one second delay node so that the computer is able
to predict when the beats are before the user hears them. After the one second
delay the waveform is taken from the audio and generated in the background of
the game for a nice effect. Now because the beats are detected on the spot I
was able to allow users to play with their own .Mp3, .ogg, and .wav files which
is much better than having to time everything just perfect and store that as
a separate file for each individual song.&lt;/p&gt;
&lt;p&gt;Here is a visual in case you'd like to have a look. &lt;a href="https://docs.google.com/open?id=0B2EyzGxnwZQuY3AxN2NTblhjck0"&gt;Journey of the
Audio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, the game can be found here at
&lt;a href="http://music.brittg.com/"&gt;http://music.brittg.com/&lt;/a&gt;. Please let me know if you
find any bugs in the comments below or in an email found on the game's website!&lt;/p&gt;
&lt;p&gt;I plan on writing a little more about how everything comes together, including
the File IO API, Beat detection algorithms, and the challenges of using the
Canvas element for actual game.&lt;/p&gt;</summary><category term="Technology"></category><category term="Html5"></category><category term="Games"></category><category term="Web Audio Api"></category><category term="Javascript"></category></entry><entry><title>IRC Is Wonderful</title><link href="https://demophoon.github.io/irc-is-wonderful.html" rel="alternate"></link><updated>2012-08-24T20:33:00-06:00</updated><author><name>Britt Gresham</name></author><id>tag:demophoon.github.io,2012-08-24:irc-is-wonderful.html</id><summary type="html">&lt;p&gt;If you were to go up to someone in my generation and ask, "What are your
thoughts on IRC?", I'm willing to bet that 99.9% would not have any idea what
you were talking about. This is a complete shame in my opinion! For my fellow
Generation-Y's out there, here is what IRC is. Imagine you are stuck on a
difficult chemistry problem on a late Sunday night. All of your Facebook
friends are also stuck on the same problem so there is no help there. Wait just
one moment, you remember that you have a genie lamp in your closet. You begin
to have serious doubts about it actually working but you continue anyways as a
placebo to calm the nerves and frustrations that have been building up deep
within your hatred for the class. As you rub the dust off to reveal the luster
of the gold lamp a being comes forth from the lamp and without having to ask he
teaches you everything you need to know about the class. Hell, he even does
your homework for you! It was really that easy!&lt;/p&gt;
&lt;p&gt;Yes, IRC is that great. It is basically a chatroom that is built for anything
and it has been around forever. There are different 'Channels' that you can
subscribe to, each one is tailored to an individual topic or no topic at all,
its really up to you to decide. Hundreds of thousands of channels ranging from
##chemistry, ##math, #cars, ##horticulture, #bitcoin, ##python, ect.
Each one with someone who probably knows the topic better than you do. You can
go into a channel and join the discussion. You can ask questions and get
answers or read along as other people have questions that you could possibly
answer to help further someones knowledge.&lt;/p&gt;
&lt;p&gt;Now that you are somewhat acclimated to the idea of IRC i'm going to tell you
my experiences and provide a challenge. Today I was at work when I joined the
##python channel on irc.freenode.net. I'd figure i'd keep it open just in
case I needed help with the project I was working on. Checking the channel
periodically I noticed that one of the people in the room was having issues
with SqlAlchemy, an object relational mapping library I had been learning since
my time started at NIC as a DevOps Intern. His problem was something that I had
once ran into when I had first started to grasp the concepts of what ORM really
was. The issue was not related to the database but just about everything
pointed there. I pitched my two cents in and it sparked a large discussion on
how to fix the problem that he was facing. I got back to work but checked back
on the discussion every once in a while just to make sure that he was being
helped and not just left alone. With my nudge in the right direction we, as a
whole, were able to solve his problem in no time. Even giving him some sample
code to replace the faulty code in his project with. It was really cool to see
how a puzzle could be put together when I handed everyone the big picture.
Which is what I want to challenge you guys today with. Go join an IRC channel,
any channel really, and try to solve a question posed by another IRC member.
Even if it means going out of your way to do so. The rewarding feeling of
helping a complete stranger with a difficult problem is definitely worth it!&lt;/p&gt;</summary><category term="Technology"></category><category term="IRC"></category><category term="Self Help"></category></entry></feed>